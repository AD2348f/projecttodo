{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","className","value","onChange","e","console","log","target","type","onClick","preventDefault","text","important","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b0e6506.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus }) => {\r\n    //here I can write javascript code and function\r\n    const inputTextHandler = (e) => {\r\n        console.log(e.target.value);\r\n        setInputText(e.target.value);\r\n    }\r\n    const submitTodoHandler = (e) => {\r\n        e.preventDefault();  //stops from always refreshing the page -> see <button> onClick \r\n        setTodos([\r\n            ...todos,\r\n            { text: inputText, important:false, completed: false, id: Math.random() * 1000}\r\n        ]);\r\n        setInputText('');   //resets the state back to zero (press plus button -> input field resets) \r\n                            //so that you don't have to delete the text inside the input field -> see value in <input>\r\n    };\r\n\r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value);\r\n    }\r\n\r\n    return (                \r\n        <form className= \"input-form\">\r\n            <div className=\"form-wrapper\">                          \r\n                <input value={inputText} onChange={inputTextHandler} type=\"text\"  className=\"todo-input\" />\r\n                <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\" >\r\n                    <i className=\"fas fa-plus-square\"></i>\r\n                </button>\r\n                <h4>Filter:</h4>\r\n                <div className=\"select\">\r\n                    <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                        <option value=\"all\">All</option>\r\n                        <option value=\"completed\">Completed</option>\r\n                        <option value=\"uncompleted\">Uncompleted</option>\r\n                    </select>\r\n                </div>\r\n             </div>\r\n        </form>        \r\n    );\r\n};\r\n\r\nexport default Form; ","\r\n\r\n// export default  () => (\r\n//     <header>\r\n//         <img source=\"\" alt=\"logo\"/>\r\n//         <div>\r\n//         <i className=\"fas fa-filter\"></i>\r\n//         <i className=\"fas fa-sort-alpha-up-alt\"></i>\r\n//         <i className=\"fas fa-sort-alpha-down\"></i>\r\n//         <i className=\"fas fa-exclamation\"></i>\r\n//         <i className=\"far fa-trash-alt\"></i>\r\n//         <i className=\"fas fa-pencil-alt\"></i>\r\n//         <i className=\"far fa-calendar-alt\"></i>\r\n//         <i className=\"fas fa-check\"></i>\r\n//         <i className=\"fas fa-plus\"></i>\r\n//         </div>\r\n//         <select>\r\n//           <option value=\"0\">Select filter:</option>\r\n//           <option value=\"1\">Important</option>\r\n//           <option value=\"2\">Done</option>\r\n//           <option value=\"3\">ascending</option>\r\n//           <option value=\"4\">Descending</option>\r\n//           <option value=\"5\">Schedule</option>    \r\n//         </select>\r\n//     </header>\r\n//     )\r\n\r\n\r\n    import React from 'react';\r\n\r\n    const Todo = ({ text, todo, todos, setTodos }) => {\r\n        //events\r\n        const deleteHandler = () => {\r\n            setTodos(todos.filter(el => el.id !== todo.id));\r\n        };\r\n        const completeHandler = () => {\r\n            setTodos(todos.map((item) => {\r\n                if(item.id === todo.id) {\r\n                    return {\r\n                        ...item, completed: !item.completed     //to modify the opposite of item.completed -> !\r\n                    };\r\n                }\r\n                    return item;     \r\n            })\r\n            );\r\n        };\r\n        const importantHandler = () => {\r\n            setTodos(todos.map((item) => {\r\n                if(item.id === todo.id) {\r\n                    return {\r\n                        ...item, important: !item.important     \r\n                    };\r\n                }\r\n                    return item;     \r\n            })\r\n            );\r\n        };\r\n        return (\r\n            <div className=\"todo\">                \r\n                <li className={`todo-item ${todo.completed ? \"completed\" : ''}${todo.important ? \"important\" : ''}`}>{text}</li>        \r\n                    <button onClick={completeHandler} className=\"complete-btn\">\r\n                        <i className=\"fas fa-check\"></i>\r\n                    </button>\r\n                    <button onClick={importantHandler} className=\"important-btn\">\r\n                        <i className=\"fas fa-exclamation\"></i>\r\n                    </button>\r\n                    <button onClick={deleteHandler} className=\"trash-btn\">\r\n                        <i className=\"fas fa-trash\"></i>\r\n                    </button>\r\n                    \r\n            </div>\r\n        );\r\n    };\r\n    \r\n    export default Todo; \r\n    \r\n    \r\n ","import React from 'react';\r\n// import components \r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => { \r\n\r\n    \r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredTodos.map((todo) => ( \r\n\r\n                    <Todo\r\n                    setTodos={setTodos}\r\n                    todos={todos}\r\n                    key={todo.id}\r\n                    todo={todo}\r\n                    text={todo.text} \r\n                    />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList; ","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\n// Importing Components\r\nimport Form from './components/Form';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction App() {\r\n  //state stuff\r\n  //input for the input field next to the add button\r\n  const [inputText, setInputText] = useState('');\r\n  // now the todo's: they will be an array of objects\r\n  const [todos, setTodos] = useState([]);\r\n  const [status, setStatus] = useState('all');\r\n  const [filteredTodos, setFilteredTodos] = useState([]);\r\n\r\n  //run once when the app starts\r\n  useEffect(() => {\r\n    getLocalTodos();\r\n  }, []);\r\n  //use Effect\r\n  useEffect(() => {\r\n    //console.log('hey');  // will only be rendered once you enter the app\r\n    filterHandler();\r\n    saveLocalTodos();\r\n  }, [todos, status]);            // if todo is added as an argument, this function is running again and again everytime you add a todos\r\n\r\n    //functions and events\r\n    const filterHandler = () => {\r\n      switch(status){\r\n        case 'completed':\r\n          setFilteredTodos(todos.filter(todo => todo.completed === true));\r\n          break;\r\n        case 'uncompleted':\r\n          setFilteredTodos(todos.filter(todo => todo.completed === false));\r\n          break;\r\n        default:\r\n          setFilteredTodos(todos);\r\n          break;\r\n      }\r\n    };\r\n//save to local\r\nconst saveLocalTodos = () => {\r\n    localStorage.setItem('todos', JSON.stringify(todos));\r\n};\r\nconst getLocalTodos = () => {\r\n  if (localStorage.getItem('todos') === null) {\r\n    localStorage.setItem('todos', JSON.stringify([]));\r\n  } else {\r\n   let todoLocal = JSON.parse(localStorage.getItem('todos'));\r\n   setTodos(todoLocal);\r\n  }\r\n};\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"App\">\r\n        <header>\r\n          <h1>My ToDo's</h1>\r\n        </header>\r\n        <TodoList filteredTodos={filteredTodos} \r\n                  setTodos={setTodos} \r\n                  todos={todos} \r\n        />\r\n        <div>\r\n          <h4>Type a new task here:</h4>\r\n          <Form inputText={inputText} \r\n                todos={todos} \r\n                setTodos={setTodos} \r\n                setInputText={setInputText} \r\n                setStatus={setStatus}\r\n          />   \r\n        </div>   \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// things to add: filter, important, time stamp instead of random id's? :D","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}